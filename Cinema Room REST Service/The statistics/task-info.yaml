type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.property-naming-strategy=SNAKE_CASE
    server.error.include-message=always
  learner_created: false
- name: src/cinema/models/Seat.java
  visible: true
  text: |
    package cinema.models;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() { return price; }

        public void setPrice(int price) { this.price = price; }

        @Override
        public boolean equals(Object obj) {
            // Edge Case: Same instances
            if (this == obj) { return true; }
            // Edge Case: Null or different type given
            if (obj == null || getClass() != obj.getClass()) { return false; }

            Seat seat = (Seat) obj;
            return row == seat.getRow() && column == seat.getColumn();
        }

        @Override
        public int hashCode() {
            return row;
        }

    }
  learner_created: false
- name: src/cinema/models/PurchaseError.java
  visible: true
  text: |
    package cinema.models;

    public class PurchaseError {
        private final String error;

        public PurchaseError(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: false
- name: src/cinema/models/CinemaInfo.java
  visible: true
  text: |
    package cinema.models;

    import java.util.Set;

    public class CinemaInfo {
        private int totalRows;
        private int totalColumns;
        private Set<Seat> availableSeats;

        public CinemaInfo(int totalRows, int totalColumns, Set<Seat> availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = availableSeats;
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public Set<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(Set<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: false
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import cinema.models.*;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.*;
    import java.util.concurrent.ConcurrentHashMap;

    @RestController
    public class CinemaController {

        private final int totalRows = 9;
        private final int totalColumns = 9;
        // more writes than reads are expected
        // private Set<Seat> seats = Collections.synchronizedSet(new HashSet<>());
        private Map<Seat, Ticket> data;

        public CinemaController() {

            int size = Math.multiplyExact(totalRows, totalColumns);
            data = new ConcurrentHashMap<>(size + (int) Math.ceil(size * 0.25));

            // seating is one-based
            for (int row = 1; row <= totalRows; row++) {
                for (int column = 1; column <= totalColumns; column++) {
                    Seat seat = new Seat(row, column);
                    Ticket ticket = new Ticket(seat);
                    data.put(seat, ticket);
                }
            }
        }

        @GetMapping(value = "/seats") // show all seats regardless of availability
        public CinemaInfo getSeats() {
            return new CinemaInfo(totalRows, totalColumns, data.keySet());
        }

        @PostMapping(value = "/purchase")
        public ResponseEntity<Object> purchaseTicket(@RequestBody Seat seat) {

            // invalid row/column
            if (seat.getRow() > totalRows || seat.getRow() < 1 || seat.getColumn() > totalColumns || seat.getColumn() < 1) {
                String msg = "The number of a row or a column is out of bounds!";
                return new ResponseEntity<>(new PurchaseError(msg), HttpStatus.BAD_REQUEST);
            }

            Ticket ticket = data.get(seat);
            // unavailable ticket
            if (ticket.isSold()) {
                String msg = "The ticket has been already purchased!";
                return new ResponseEntity<>(new PurchaseError(msg), HttpStatus.BAD_REQUEST);
            }

            ticket.setSold(true);
            return new ResponseEntity<>(ticket, HttpStatus.OK);

        }

        @PostMapping(value = "/return")
        public ResponseEntity<Object> refundTicket(@RequestBody Map<String,String> token) {
            List<Ticket> ticketList = new ArrayList<>(data.values());
            Seat seat = null;
            for (Ticket ticket : ticketList) {
                if (ticket.getToken().equals(token.get("token")) && ticket.isSold()) {
                    seat = ticket.getTicket();
                    data.get(seat).setSold(false);
                }
            }

            // ticket never sold
            if (seat == null) {
                String msg = "Wrong token!";
                return new ResponseEntity<>(new PurchaseError(msg), HttpStatus.BAD_REQUEST);
            }

            // set up body response
            final Seat immutableSeat = seat;
            Object refund = new Object() {
              Seat returnedTicket;

                {
                    returnedTicket = immutableSeat;
                }

                public Seat getReturnedTicket() {
                    return returnedTicket;
                }
            };

            return new ResponseEntity<>(refund, HttpStatus.OK);
        }

    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/models/Ticket.java
  visible: true
  text: |
    package cinema.models;

    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

    import java.util.UUID;

    @JsonIgnoreProperties("sold")
    public class Ticket {
        private String token;
        private Seat ticket;
        private boolean sold;

        public Ticket(Seat ticket) {
            this.ticket = ticket;
            this.sold = false;
            this.token = UUID.randomUUID().toString();
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat seat) {
            this.ticket = seat;
        }

        public boolean isSold() {
            return sold;
        }

        public void setSold(boolean sold) {
            this.sold = sold;
        }

    }
  learner_created: false
- name: src/cinema/models/CinemaStat.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
record: 3
